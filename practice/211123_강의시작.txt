
★ 강의 시작

예를 들어서, y=ax^2+bx+c란 2차함수 그래프가 존재한다. 이것을 미분한다면,
y = wx + b로 표현 가능할 것이다. 이는,
w : 기울기, b : 절편
weight : 가중치 최소의 loss -!!
궁극의 목표는 최적의 weight를 구하는 것이다
받아 들인 데이터마다 (그때그때) 최적의 weight는 다르다.
(신뢰할 수 있는 데이터는 정제된 데이터이다.)
 x, y는 정제된 데이터이며 이것들은 사람이 구해줘야하는 부분이다.
반복적으로 선을 그으며 훈련하며 최적의 weight와 bias를 구한다. (기준은 최소의 loss)
x와 y가 제대로 정제된 깔끔한 데이터일 경우 결국 y=wx+b에서 y'=wx'+b 새로운 y값을 예측해 낼 수 있다.

" 데이터의 분포를 보고 우리가 제공한 정제데이터를 통해 머신이 선을 그어준다."

git-hub repository에 VS 내 study 작업폴더를 소스링킹해놓는다
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ  ·  ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

" D E E P "

AI  vs  ML  vs  DL

┌──────────AI : 통상적 포괄적 AI────────┐
│┌───ML : 기계에게 학습, 딥러닝 이전 머신러닝 ───┐│
││┌DL : 머신러닝 중 머신러닝을 deep하게 학습시킨 것 ┐││
┗┗┗────────────────────────┘┘┘

표기법 : camelCase(카멜케이스)
ctrl + / : 자동 한 줄 주석처리


keras폴더 내 실습파일 작성
keras01_1.py
→ 예측치를 4로 고정해 1~4의 기본적 분석모델을 학습
keras01_2.py
→ 어레이, 예측값, 배치, 에포치 값 등을 조절해 본다.
keras02_1_deep.py
→ 어레이를 다시 3개로 고치고 히든레이어를 deep하게 구성해 본다
(★과제★)keras02_2_homework.py
→ epochs를 30으로 고정하고 히든레이어를 고쳐가며 4의 예측값을 도출해본다.

★ 표기법 통일
자바에선 주로 clearCase 이런식으로 소문자 시작,대문자 섞어쓰는데
https://velog.io/@leyuri/%ED%91%9C%EA%B8%B0%EB%B2%95-%EC%8A%A4%EB%84%A4%EC%9D%B4%ED%81%AC-%EC%BC%80%EC%9D%B4%EC%8A%A4-%ED%8C%8C%EC%8A%A4%EC%B9%BC-%EC%BC%80%EC%9D%B4%EC%8A%A4-%EC%B9%B4%EB%A9%9C-%EC%BC%80%EC%9D%B4%EC%8A%A4
파이썬에선 주로 clear_case 이런식으로 아래bar로 많이 쓴다




★ import에러 뜰때 좌하단 눌러서 파이선 버전 확인 (3.9.7 base : conda)