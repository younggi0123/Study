from bayes_opt import BayesianOptimization

def black_box_function(x,y):
    return -x ** 2 - (y-1) ** 2 + 1

pbounds = { 'x' : (2, 4), 'y':(-3,3) }

# f에 모델.
# p-bounds에 hyperparameter를 넣고 가장 좋은 값을 빼준다.
optimizer = BayesianOptimization(
    f = black_box_function,
    pbounds=pbounds,
    random_state= 66
)

optimizer.maximize(
    init_points=2, # 모델 2번돌아
    n_iter=20
)


# 실행결과


# n_iter=5
# target 결과값 6번째
# |   iter    |  target   |     x     |     y     |
# -------------------------------------------------
# |  1        | -14.56    |  2.309    | -2.198    |
# |  2        | -6.433    |  2.725    |  1.075    |
# |  3        | -14.75    |  3.369    | -1.097    |
# |  4        | -6.331    |  2.489    |  2.065    |
# |  5        | -19.0     |  4.0      |  3.0      |
# |  6        | -3.117    |  2.0      |  1.341    |   ⓥCheck!
# |  7        | -3.634    |  2.0      |  0.2036   |
# =================================================

# n_iter=15
# target 결과값 16번째
# |   iter    |  target   |     x     |     y     |
# -------------------------------------------------
# |  1        | -14.56    |  2.309    | -2.198    |
# |  2        | -6.433    |  2.725    |  1.075    |
# |  3        | -14.75    |  3.369    | -1.097    |
# |  4        | -6.331    |  2.489    |  2.065    |
# |  5        | -19.0     |  4.0      |  3.0      |
# |  6        | -3.117    |  2.0      |  1.341    |
# |  7        | -3.634    |  2.0      |  0.2036   |
# |  8        | -7.0      |  2.0      |  3.0      |
# |  9        | -3.053    |  2.0      |  0.7695   |
# |  10       | -3.727    |  2.0      |  1.853    |
# |  11       | -3.001    |  2.0      |  1.035    |
# |  12       | -3.002    |  2.0      |  0.9516   |
# |  13       | -3.004    |  2.0      |  1.062    |
# |  14       | -3.001    |  2.0      |  0.9753   |
# |  15       | -3.0      |  2.0      |  0.9868   |
# |  16       | -3.0      |  2.0      |  1.017    |   ⓥCheck!
# |  17       | -3.001    |  2.0      |  0.9752   |
# =================================================


# 그리드 서치보다 속도 압도적 빨라.
#                                   => 시간과 장비로 판단
# https://aistory4u.tistory.com/entry/%EA%B0%80%EC%9A%B0%EC%8B%9C%EC%95%88-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%ED%9A%8C%EA%B7%80
# 가우시안 프로세스를 통해 도출(공식문서 및 구글링 ㄱㄱ)
# 가우시안 최적화